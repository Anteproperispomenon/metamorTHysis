module Metamorth.Interaction.Quasi.Parser
  (

  ) where

import Data.Attoparsec.Text qualified as AT

import Data.Text qualified as T

import Metamorth.Helpers.Parsing

import Metamorth.Interaction.Quasi.Parser.Helpers

-- | Details generated by the QuasiQuoter.
data OrthographyDetails = OrthographyDetails
  { odName :: String -- or T.Text
  , odInputFile  :: Maybe FilePath
  , odOutputFile :: Maybe FilePath
  -- | Whether to unify branches for parser.
  , odUnifyBranches :: Maybe Bool
  -- | Whether to group guards for parser.
  , odGroupGuards   :: Maybe Bool
  -- | Whether to check states for parser.
  , odCheckStates   :: Maybe Bool
  -- | The name of the input parser function.
  , odInputName     :: Maybe String
  -- | The name of the output function.
  , odOutputName    :: Maybe String
  -- | The suffix used for internal parser functions.
  , odInSuffix      :: Maybe String
  -- | The suffix used for internal output functions.
  , odOutSuffix     :: Maybe String
  -- | The strings used to identify this parser
  --   for the CLI interface.
  , odCLINames      :: [String]
  } deriving (Show, Eq)

{-
pattern ExtraParserDetails :: String -> [String] -> Bool -> Bool -> Bool -> String -> String -> ExtraParserDetails
pattern ExtraParserDetails 
  { epdParserName
  , epdOtherNames
  , epdUnifyBranches
  , epdGroupGuards
  , epdCheckStates
  , epdMainFuncName
  , epdNameSuffix 

data ExtraOutputDetails = ExtraOutputDetails 
  { eodOutputName :: String
  , eodSuffix     :: String
  , eodOtherNames :: [String]
  } deriving (Show, Eq)


-}



{-

example configuration:

phonemes : "phonemes.thym"

Umista
  input  : "parsers/umista.thyp"
  output : "output/umista.thyo"
  cli-names : "umista", "ums", "u"
  suffix : "ums"
  parser-name : umistaParser -- optional
  output-name : umistaOutput -- optional
  unify-paths : off

-}






